package main

import (
	"context"
	"fmt"
	"net/http"
	"sync"
	"time"
)

type CallBackRequest struct {
	method string
	URL    string
	Status chan int
}

type CallBackConfig struct {
	Conns   int
	Timeout time.Duration
}

type CallbackService struct {
	Config      *CallBackConfig
	RequestChan chan CallBackRequest
}

func NewCallbackService(ctx context.Context, cfg *CallBackConfig) *CallbackService {
	cb := &CallbackService{
		Config:      cfg,
		RequestChan: make(chan CallBackRequest),
	}

	go cb.startService(ctx)
	return cb
}

func (cb *CallbackService) CLose() {
	close(cb.RequestChan)
}

func (cb *CallbackService) CallBack(callbackRequest CallBackRequest) chan int {
	callbackRequest.Status = make(chan int, 1)
	cb.RequestChan <- callbackRequest
	return callbackRequest.Status
}

func (cb *CallbackService) startService(ctx context.Context) {
	wg := &sync.WaitGroup{}
	wg.Add(cb.Config.Conns)
	for i := 0; i < cb.Config.Conns; i++ {
		go cb.client(ctx, wg)
	}
	wg.Wait()
}

func (cb *CallbackService) client(ctx context.Context, wg *sync.WaitGroup) {
	defer wg.Done()
	client := &http.Client{Timeout: cb.Config.Timeout * time.Second}

	for {
		select {
		case <-ctx.Done():
			return
		case callbackReq := <-cb.RequestChan:
			callbackReq.Status <- cb.sendRequest(client, callbackReq)
			close(callbackReq.Status)
		}
	}
}

func (cb *CallbackService) sendRequest(client *http.Client, callbackReq CallBackRequest) int {
	request, _ := http.NewRequest(callbackReq.method, callbackReq.URL, nil)

	resp, err := client.Do(request)
	if err != nil {
		fmt.Println(err)
		return 0
	}
	defer resp.Body.Close()
	return resp.StatusCode
}

func main() {

}
